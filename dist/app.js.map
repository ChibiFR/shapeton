{"version":3,"sources":["webpack:///webpack/bootstrap 376cc0012b01182d423a","webpack:///./src/Game.js","webpack:///./src/Layout.js","webpack:///./src/index.js","webpack:///./src/Scene.js","webpack:///./src/Map.js","webpack:///./src/Loop.js","webpack:///./src/Rectangle.js","webpack:///./src/Shape.js","webpack:///./src/Point.js","webpack:///./src/Dimension.js"],"names":[],"mappings":"YACA,cAMA,IACA,iBAGA,mBACA,CACA,IACA,KAIA,2CAGA,aAGA,OACA,OAIA,IAzBA,eA4BA,MAGA,uBACA,GACA,kCACA,CACA,gBACA,cAGA,OAGA,iBACA,YACA,qBAA2B,UAA0B,UACrD,YAAiC,CAAe,QAChD,EAEA,aADA,QAIA,mBAAsD,wCAA+D,SAGrH,MAGA,2DC5DA,GAEA,OACA,cAKA,oCAMA,wBAMA,8CAEA,4CACA,MACA,SAEA,QACA,SAOA,YACA,oBACA,KAOA,aACA,oBACA,MAEA,QACA,WACA,OAKA,UACA,0BACA,qCACA,WAGA,kDCxDA,OACA,KAMA,oBACA,mBACA,MAOA,qBACA,oBACA,MAGA,+GCvBA,GAEA,8CACA,iDAEA,sCACA,+CACA,EAAC,GAED,wBACA,YAEA,sDCfA,OAEA,KACA,cAKA,aACA,IAKA,OACA,iBACA,MAMA,SACA,UACA,QAGA,kBCzBA,iBACA,KACA,cAKA,MAMA,eACA,UAOA,OACA,qBAEA,kBACA,MAIA,UADA,UAQA,SACA,qBAEA,YACA,mBAGA,qBAEA,cAHA,YASA,UACA,qBAEA,YACA,6BACA,yBAEA,GAOA,WACA,qBACA,6BAEA,WAOA,WACA,oBACA,UAGA,yCCnFA,OAEA,KAKA,eAIA,MAKA,eAKA,+BAKA,iBAKA,YACA,CAMA,UACA,cACA,OAEA,QACA,MACA,gCACA,YACA,iDACA,MACA,SAEA,GAMA,UACA,uBACA,UAEA,2BACA,QAGA,6CAEA,qCACA,GAEA,qBACA,QAEA,kDACA,MACA,SACA,EAEA,OACA,MACA,2CACA,oCAEA,EAGA,yCCrFA,GAEA,mBAUA,2BACA,CACA,sBACA,QAMA,QACA,MAAW,0BAA8B,UACzC,qBACA,uBACA,aACA,kBACA,mBAGA,UACA,qBACA,gBACA,2BACA,oBACA,6BACA,oBACA,qBACA,oBACA,iBAEA,cACA,uBACA,SAEA,4BACA,SAEA,SAGA,oCCnDA,OASA,uCAKA,MAMA,aAMA,iBAMA,cAMA,YACA,SAMA,QACA,mBACA,CAEA,SACA,YACA,GAMA,QACA,mBACA,CAEA,SACA,YACA,GAMA,YACA,uBACA,KAEA,aACA,gBACA,OAMA,aACA,uBACA,MAEA,cACA,gBACA,QAMA,OACA,CAGA,8CC7FA,GACA,OAMA,iBAKA,MAMA,UACA,IAMA,QACA,2BACA,GAEA,SACA,MACA,IAMA,QACA,4BACA,GAEA,SACA,MACA,IAGA,8CC9CA,GACA,OACA,iBAKA,MAMA,cACA,SAMA,YACA,2BACA,OAEA,aACA,MACA,QAMA,aACA,4BACA,QAEA,cACA,MACA,SAGA","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 376cc0012b01182d423a","import Scene from './Scene';\r\nimport Loop from './Loop';\r\n\r\nclass Game {\r\n  constructor() {\r\n    /**\r\n     * The canvas which the game is rendered in.\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas = document.querySelector('canvas');\r\n\r\n    /**\r\n     * The game scene.\r\n     * @type {Scene}\r\n     */\r\n    this.scene = new Scene();\r\n\r\n    /**\r\n     * The game loop.\r\n     * @type {Loop}\r\n     */\r\n    this.loop = new Loop(this.canvas.getContext('2d'));\r\n\r\n    window.addEventListener('resize', () => {\r\n      this._resize();\r\n    });\r\n\r\n    this._resize();\r\n  }\r\n\r\n  /**\r\n   * The width of the canvas.\r\n   * @type {number}\r\n   * @readonly\r\n   */\r\n  get width() {\r\n    return this.canvas.width;\r\n  }\r\n\r\n  /**\r\n   * The height of the canvas.\r\n   * @type {number}\r\n   * @readonly\r\n   */\r\n  get height() {\r\n    return this.canvas.height;\r\n  }\r\n\r\n  start() {\r\n    this.loop.start();\r\n  }\r\n  \r\n  /**\r\n   * @private\r\n   */\r\n  _resize() {\r\n    this.canvas.width = window.innerWidth;\r\n    this.canvas.height = window.innerHeight;\r\n  }\r\n}\r\n\r\nexport default new Game();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Game.js\n// module id = 0\n// module chunks = 0","import Game from './Game';\r\n\r\n/**\r\n * Translate points and dimensions from percentage to current\r\n * value in pixels.\r\n */\r\nclass Layout {\r\n  /**\r\n   * Translate a value from width percentage to pixels.\r\n   * @param {number} width A percentage value.\r\n   * @return {number} The value as pixels.\r\n   */\r\n  static fromWidth(width) {\r\n    return Game.width / (100 / width);\r\n  }\r\n\r\n  /**\r\n   * Translate a value from height percentage to pixels.\r\n   * @param {number} height A percentage value.\r\n   * @return {number} The value as pixels.\r\n   */\r\n  static fromHeight(height) {\r\n    return Game.height / (100 / height);\r\n  }\r\n}\r\n\r\nexport default Layout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Layout.js\n// module id = 1\n// module chunks = 0","import Game from './Game';\r\nimport Rectangle from './Rectangle';\r\nimport Point from './Point';\r\nimport Dimension from './Dimension';\r\n\r\nconst r = new Rectangle(new Point(50, 50), new Dimension(30, 30), 20);\r\nconst colours = ['#000000', 'red', 'blue', '#ff00ff', 'green'];\r\n\r\nwindow.addEventListener('keydown', () => {\r\n  r.colour = colours[Math.round(Math.random() * colours.length) - 1];\r\n});\r\n\r\nGame.scene.set('rect', r);\r\nGame.start();\r\n\r\nwindow.Game = Game;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 2\n// module chunks = 0","import Map from './Map';\r\n\r\nclass Scene {\r\n  constructor() {\r\n    /**\r\n     * The map of the scene objects.\r\n     * @type {Map}\r\n     */\r\n    this.map = new Map();\r\n  }\r\n\r\n  /**\r\n   * @param {string} objectName \r\n   */\r\n  get(objectName) {\r\n    return this.map.get(objectName);\r\n  }\r\n\r\n  /**\r\n   * @param {string} objectName \r\n   * @param {*} object \r\n   */\r\n  set(objectName, object) {\r\n    this.map.set(objectName, object);\r\n  }\r\n}\r\n\r\nexport default Scene;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Scene.js\n// module id = 3\n// module chunks = 0","/**\r\n * Utility class to store maps of any type.\r\n */\r\nclass Map {\r\n  constructor() {\r\n    /**\r\n     * @type {string[]}\r\n     * @private\r\n     */\r\n    this._names = [];\r\n\r\n    /**\r\n     * @type {Array}\r\n     * @private\r\n     */\r\n    this._values = [];\r\n  }\r\n\r\n  /**\r\n   * Get a value.\r\n   * @param {string} name \r\n   * @return {*} The requested value of null if not found.\r\n   */\r\n  get(name) {\r\n    const index = this._names.indexOf(name);\r\n\r\n    if (index !== -1) {\r\n      return this._values[index];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Set a value.\r\n   * @param {string} name \r\n   * @param {*} value \r\n   */\r\n  set(name, value) {\r\n    const index = this._names.indexOf(name);\r\n\r\n    if (index !== -1) {\r\n      this._values[index] = value;\r\n    } else {\r\n      this._names.push(name);\r\n      this._values.push(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a value.\r\n   * @param {string} name \r\n   */\r\n  remove(name) {\r\n    const index = this._names.indexOf(name);\r\n\r\n    if (index !== -1) {\r\n      this._names.splice(index, 1);\r\n      this._values.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loop through the map. The callback takes the name and the\r\n   * value as arguments.\r\n   * @param {function} callback \r\n   */\r\n  forEach(callback) {\r\n    for (const index in this._names) {\r\n      callback(this._names[index], this._values[index]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the index of a value stored in the map.\r\n   * @param {string} name \r\n   * @return {number} The index of the requested value or -1 if not found.\r\n   */\r\n  indexOf(name) {\r\n    return this._names.indexOf(name);\r\n  }\r\n}\r\n\r\nexport default Map;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Map.js\n// module id = 4\n// module chunks = 0","import Game from './Game';\r\n\r\nclass Loop {\r\n  /**\r\n   * Create a new Loop.\r\n   * @param {CanvasRenderingContext2D} context \r\n   */\r\n  constructor(context) {\r\n    /**\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context = context;\r\n\r\n    /**\r\n     * @type {function[]}\r\n     */\r\n    this.updates = [];\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.animationFrame = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.deltaTime = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.time = 0;\r\n  }\r\n\r\n  /**\r\n   * A function to run each frame.\r\n   * @param {function} update \r\n   */\r\n  update(update) {\r\n    this.updates.push(update);\r\n  }\r\n\r\n  start() {\r\n    if (!this.animationFrame) {\r\n      this.deltaTime = 0;\r\n      this.time = 0;\r\n      this.animationFrame = requestAnimationFrame((frame) => {\r\n        this.render(frame);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update and render the scene.\r\n   * @param {number} frame \r\n   */\r\n  render(frame) {\r\n    this.deltaTime = frame - this.time;\r\n    this.time = frame;\r\n\r\n    for (const update of this.updates) {\r\n      update();\r\n    }\r\n\r\n    this.context.clearRect(0, 0, Game.width, Game.height);\r\n    \r\n    Game.scene.map.forEach((key, value) => {\r\n      if (!value.visible) return;\r\n      \r\n      value.draw(this.context);\r\n    });\r\n\r\n    this.animationFrame = requestAnimationFrame((frame) => {\r\n      this.render(frame);\r\n    });\r\n  }\r\n\r\n  stop() {\r\n    if (this.animationFrame) {\r\n      cancelAnimationFrame(this.animationFrame);\r\n      this.animationFrame = 0;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Loop;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Loop.js\n// module id = 5\n// module chunks = 0","import Shape from './Shape';\r\n\r\nclass Rectangle extends Shape {\r\n  /**\r\n   * Create a new Rectangle.\r\n   * @param {Point} point \r\n   * @param {Dimension} dimension \r\n   * @param {number} [radius] \r\n   * @param {string} [colour] \r\n   * @param {boolean} [fill] \r\n   * @param {boolean} [visible] \r\n   */\r\n  constructor(point, dimension, radius = 0, colour, fill, visible) {\r\n    super(point, dimension, colour, fill, visible);\r\n    this.radius = radius;\r\n  }\r\n\r\n  /**\r\n   * Draw the rectangle.\r\n   * @param {CanvasRenderingContext2D} context \r\n   */\r\n  draw(context) {\r\n    const { x, y, width, height, radius } = {\r\n      x: this.x - this.width / 2,\r\n      y: this.y - this.height / 2,\r\n      width: this.width,\r\n      height: this.height,\r\n      radius: this.radius\r\n    };\r\n\r\n    context.beginPath();\r\n    context.moveTo(x + radius, y);\r\n    context.lineTo(x + width - radius, y);\r\n    context.arcTo(x + width, y, x + width, y + radius, radius);\r\n    context.lineTo(x + width, y + height - radius);\r\n    context.arcTo(x + width, y + height, x + width - radius, y + height, radius);\r\n    context.lineTo(x + radius, y + height);\r\n    context.arcTo(x, y + height, x, y + height - radius, radius);\r\n    context.lineTo(x, y + radius);\r\n    context.arcTo(x, y, x + radius, y, radius);\r\n\r\n    if (this.fill) {\r\n      context.fillStyle = this.colour;\r\n      context.fill();\r\n    } else {\r\n      context.strokeStyle = this.colour;\r\n      context.stroke();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Rectangle;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Rectangle.js\n// module id = 6\n// module chunks = 0","class Shape {\r\n  /**\r\n   * Create a new Shape.\r\n   * @param {Point} point \r\n   * @param {Dimension} dimension \r\n   * @param {string} [colour] \r\n   * @param {boolean} [fill] \r\n   * @param {boolean} [visible] \r\n   */\r\n  constructor(point, dimension, colour = '#000000', fill = true, visible = true) {\r\n    /**\r\n     * Center of the shape.\r\n     * @type {Point}\r\n     */\r\n    this.point = point;\r\n\r\n    /**\r\n     * Width/height of the shape.\r\n     * @type {Dimension}\r\n     */\r\n    this.dimension = dimension;\r\n\r\n    /**\r\n     * Colour of the shape.\r\n     * @type {string}\r\n     */\r\n    this.colour = colour;\r\n\r\n    /**\r\n     * Fill or stroke the shape.\r\n     * @type {boolean}\r\n     */\r\n    this.fill = fill;\r\n\r\n    /**\r\n     * Set the shape as visible or not.\r\n     * @type {boolean}\r\n     */\r\n    this.visible = visible;\r\n  }\r\n\r\n  /**\r\n   * The x point (get in pixels, set in percentage).\r\n   * @type {number}\r\n   */\r\n  get x() {\r\n    return this.point.x;\r\n  }\r\n\r\n  set x(x) {\r\n    this.point.x = x;\r\n  }\r\n\r\n  /**\r\n   * The y point (get in pixels, set in percentage).\r\n   * @type {number}\r\n   */\r\n  get y() {\r\n    return this.point.y;\r\n  }\r\n\r\n  set y(y) {\r\n    this.point.y = y;\r\n  }\r\n\r\n  /**\r\n   * The width (get in pixels, set in percentage).\r\n   * @type {number}\r\n   */\r\n  get width() {\r\n    return this.dimension.width;\r\n  }\r\n\r\n  set width(width) {\r\n    this.dimension.width = width;\r\n  }\r\n\r\n  /**\r\n   * The height (get in pixels, set in percentage).\r\n   * @type {number}\r\n   */\r\n  get height() {\r\n    return this.dimension.height;\r\n  }\r\n\r\n  set height(height) {\r\n    this.dimension.height = height;\r\n  }\r\n\r\n  /**\r\n   * Draw the shape to the canvas.\r\n   * @param {CanvasRenderingContext2D} context \r\n   */\r\n  draw(context) {\r\n  }\r\n}\r\n\r\nexport default Shape;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Shape.js\n// module id = 7\n// module chunks = 0","import Layout from './Layout';\r\n\r\n/**\r\n * Represent a point in percentage.\r\n */\r\nclass Point {\r\n  /**\r\n   * Create a new Point.\r\n   * @param {number} x X value in percentage.\r\n   * @param {number} y Y value in percentage.\r\n   */\r\n  constructor(x, y) {\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this._x = x;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this._y = y;\r\n  }\r\n\r\n  /**\r\n   * The x value (get in pixels, set in percentage).\r\n   * @type {number}\r\n   */\r\n  get x() {\r\n    return Layout.fromWidth(this._x);\r\n  }\r\n\r\n  set x(x) {\r\n    this._x = x;\r\n  }\r\n\r\n  /**\r\n   * The y value (get in pixels, set in percentage).\r\n   * @type {number}\r\n   */\r\n  get y() {\r\n    return Layout.fromHeight(this._y);\r\n  }\r\n\r\n  set y(y) {\r\n    this._y = y;\r\n  }\r\n}\r\n\r\nexport default Point;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Point.js\n// module id = 8\n// module chunks = 0","import Layout from './Layout';\r\n\r\n/**\r\n * Represent a dimension in percentage.\r\n */\r\nclass Dimension {\r\n  constructor(width, height) {\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this._width = width;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this._height = height;\r\n  }\r\n\r\n  /**\r\n   * The width (get in pixels, set in percentage).\r\n   * @type {number}\r\n   */\r\n  get width() {\r\n    return Layout.fromWidth(this._width);\r\n  }\r\n\r\n  set width(width) {\r\n    this._width = width;\r\n  }\r\n\r\n  /**\r\n   * The height (get in pixels, set in percentage).\r\n   * @type {number}\r\n   */\r\n  get height() {\r\n    return Layout.fromHeight(this._height);\r\n  }\r\n\r\n  set height(height) {\r\n    this._height = height;\r\n  }\r\n}\r\n\r\nexport default Dimension;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dimension.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}